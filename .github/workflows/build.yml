name: Build Executables

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        architecture: [x86_64, arm64]
        exclude:  # Exclude unsupported combinations
          - os: ubuntu-latest
            architecture: arm64
          - os: windows-latest
            architecture: arm64
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'  # Replace with your Python version

    - name: Install dependencies on Mac
      if: ${{ matrix.os == 'macos-latest' }}
      run: |
        arch -${{ matrix.architecture }} python -m pip install --upgrade pip
        arch -${{ matrix.architecture }} pip install -r requirements.txt
        arch -${{ matrix.architecture }} pip install pyinstaller

    - name: Install dependencies on Windows/Linux
      if: ${{ matrix.os != 'macos-latest' }}
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Create hook for readchar
      run: |
        echo "from PyInstaller.utils.hooks import copy_metadata" > hook-readchar.py
        echo "datas = copy_metadata('readchar')" >> hook-readchar.py

    - name: Build executable on Mac
      if: ${{ matrix.os == 'macos-latest' }}
      run: |
        pyinstaller --onefile --console --target-arch=${{ matrix.architecture }} --additional-hooks-dir=. serial_to_csv.py
    
    - name: Build executable on Windows/Linux
      if: ${{ matrix.os != 'macos-latest' }}
      run: |
        pyinstaller --onefile --console --additional-hooks-dir=. serial_to_csv.py
        
    - name: Check if executable exists
      run: ls -l dist/

    - name: Compress Normal
      if: ${{ matrix.os != 'windows-latest' }}
      run: |
        chmod +x dist/*
        zip -r ${{ matrix.os }}-${{ matrix.architecture }}.zip dist

    - name: Compress Windows
      if: ${{ matrix.os == 'windows-latest' }}
      run: Compress-Archive -Path "dist\*" -DestinationPath ${{ matrix.os }}-${{ matrix.architecture }}.zip
        
    - name: Upload Artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.os }}-${{ matrix.architecture }}-executable
        path: ./${{ matrix.os }}-${{ matrix.architecture }}.zip

    # - name: Upload Windows executable to GitHub Release
    #   if: matrix.os == 'windows-latest'
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: windows-executable
    #     path: dist/serial_to_csv.exe

    # - name: Upload Mac executable to GitHub Release
    #   if: matrix.os == 'macos-latest'
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: macos-executable
    #     path: dist/serial_to_csv

    # - name: Upload Linux executable to GitHub Release
    #   if: matrix.os == 'ubuntu-latest'
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: linux-executable
    #     path: dist/serial_to_csv


  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Create a tag for this commit
      run: |
        TAG_NAME="v$(date +'%Y%m%d%H%M%S')"
        git tag $TAG_NAME
        git push origin $TAG_NAME
        echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV

    - name: Create a Release
      uses: actions/create-release@v1
      id: create_release
      with:
        tag_name: ${{ env.TAG_NAME }}
        release_name: "Logger"
        body: "Compiled executables"
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Download Windows executable artifact
      uses: actions/download-artifact@v3
      with:
        name: windows-latest-x86_64-executable
        path: windows

    - name: Download Mac x86_64 executable artifact
      uses: actions/download-artifact@v3
      with:
        name: macos-latest-x86_64-executable
        path: macos-x86_64

    - name: Download Mac arm64 executable artifact
      uses: actions/download-artifact@v3
      with:
        name: macos-latest-arm64-executable
        path: macos-arm64

    - name: Download Linux executable artifact
      uses: actions/download-artifact@v3
      with:
        name: ubuntu-latest-x86_64-executable
        path: linux

    - name: List the directory
      run: ls -R .


    - name: Upload Linux executable to GitHub Release
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./linux/ubuntu-latest-x86_64.zip  # Path to the Linux executable
        asset_name: serial_to_csv-linux.zip  # Name of the asset
        asset_content_type: application/octet-stream
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Windows executable to GitHub Release
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./windows/windows-latest-x86_64.zip  # Path to the Windows executable
        asset_name: serial_to_csv-windows.zip  # Name of the asset
        asset_content_type: application/octet-stream 
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
    - name: Upload macOS x86 executable to GitHub Release
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./macos-x86_64/macos-latest-x86_64.zip  # Path to the macOS executable
        asset_name: serial_to_csv-macos-x86_64.zip  # Name of the asset
        asset_content_type: application/octet-stream
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload macOS arm executable to GitHub Release
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./macos-arm64/macos-latest-arm64.zip  # Path to the macOS executable
        asset_name: serial_to_csv-macos-arm64.zip  # Name of the asset
        asset_content_type: application/octet-stream
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
